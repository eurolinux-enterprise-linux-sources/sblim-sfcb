diff -up sblim-sfcb-1.3.11/providerDrv.c.orig sblim-sfcb-1.3.11/providerDrv.c
--- sblim-sfcb-1.3.11/providerDrv.c.orig	2011-10-11 14:37:35.333203888 +0200
+++ sblim-sfcb-1.3.11/providerDrv.c	2011-10-11 14:38:45.951198992 +0200
@@ -2894,6 +2894,7 @@ void processProviderInvocationRequests(c
       _SFCB_TRACE(1, ("--- Waiting for provider request to R%d-%lu",
                    providerSockets.receive,getInode(providerSockets.receive)));
       parms = (Parms *) malloc(sizeof(*parms));
+      memset(parms, 0, sizeof(*parms));
       
       rc = spRecvReq(&providerSockets.receive, &parms->requestor,
                      (void **) &parms->req, &rl, &mqg);
diff -up sblim-sfcb-1.3.11/result.c.orig sblim-sfcb-1.3.11/result.c
--- sblim-sfcb-1.3.11/result.c.orig	2011-10-11 14:38:50.272198679 +0200
+++ sblim-sfcb-1.3.11/result.c	2011-10-11 14:41:58.383185631 +0200
@@ -168,9 +168,9 @@ static CMPIStatus __rft_release(CMPIResu
 {
    NativeResult *nr = (NativeResult*) result;
 
-   free(nr->data);
-   free(nr->resp);
-   free(result);
+   if (nr->data) { free(nr->data); nr->data = NULL; }
+   if (nr->resp) { free(nr->resp); nr->resp = NULL; }
+   if (result) { free(result); result = NULL; }
 
    CMReturn(CMPI_RC_OK);
 }
@@ -284,13 +284,13 @@ static CMPIStatus __rft_returnInstance(c
 
    if (isInst) {
       size=getInstanceSerializedSize(instance);
-      ptr=nextResultBufferPos(r, MSG_SEG_INSTANCE, size);
+      ptr=nextResultBufferPos(r, MSG_SEG_INSTANCE, (unsigned long)size);
       _SFCB_TRACE(1,("--- Moving instance %d",size));
       getSerializedInstance(instance,ptr); /* memcpy inst to ptr */
    }
    else {
       size=getConstClassSerializedSize((CMPIConstClass*)instance);
-      ptr=nextResultBufferPos(r, MSG_SEG_CONSTCLASS, size);
+      ptr=nextResultBufferPos(r, MSG_SEG_CONSTCLASS, (unsigned long)size);
       _SFCB_TRACE(1,("--- Moving class %d",size));
       getSerializedConstClass((CMPIConstClass*)instance,ptr);
    }
diff -up sblim-sfcb-1.3.11/support.c.orig sblim-sfcb-1.3.11/support.c
--- sblim-sfcb-1.3.11/support.c.orig	2011-10-11 14:42:04.241185208 +0200
+++ sblim-sfcb-1.3.11/support.c	2011-10-11 14:44:20.447175745 +0200
@@ -410,9 +410,11 @@ static void __cleanup_mt(void *ptr)
      mt->cleanupDone = 1;
      __flush_mt(mt);
      
-     if (mt->hc.memObjs) free(mt->hc.memObjs);
-     if (mt->hc.memEncObjs) free(mt->hc.memEncObjs);
-     if (mt) free(mt);
+     if (mt->hc.memObjs) 
+       { free(mt->hc.memObjs); mt->hc.memObjs = NULL; }
+     if (mt->hc.memEncObjs)
+       { free(mt->hc.memEncObjs); mt->hc.memEncObjs = NULL; }
+     if (mt) { free(mt); mt = NULL; }
    }
    _SFCB_EXIT();
 }
@@ -684,12 +686,15 @@ void releaseHeap(void *hc)
    
    __flush_mt(mt);
    
-   if (mt->hc.memObjs) free(mt->hc.memObjs);
-   if (mt->hc.memEncObjs) free(mt->hc.memEncObjs);
-   
+   if (mt->hc.memObjs) { free(mt->hc.memObjs); mt->hc.memObjs = NULL; }
+   if (mt->hc.memEncObjs) { free(mt->hc.memEncObjs); mt->hc.memEncObjs = NULL; }
+  
+   if (hc) { 
    memcpy(&mt->hc,hc,sizeof(HeapControl));
    
    free(hc);
+   hc = NULL;
+   }
    _SFCB_EXIT();
 }
 
